From 09d49a51354ed53e90c8f588251cceb1ba0323fe Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Wed, 1 Dec 2021 10:57:16 +0800
Subject: [PATCH 6/9] Allow updating files in the /boot directory

This patch adds support for copying all files from the deployment's
/usr/lib/ostree-boot directory to the relevant /boot/ostree/$os-$bootcsum/
directory. This feature can be enabled by 'touch .ostree-bootcsumdir-source'
in /usr/lib/ostree-boot.

Upstream-Status: Inappropriate [LAT specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
Signed-off-by: Zhang Xiao <xiao.zhang@windriver.com>
---
 src/libostree/ostree-sysroot-deploy.c | 81 +++++++++++++++++++++------
 1 file changed, 65 insertions(+), 16 deletions(-)

diff --git a/src/libostree/ostree-sysroot-deploy.c b/src/libostree/ostree-sysroot-deploy.c
index 8b113ea5..8d138688 100644
--- a/src/libostree/ostree-sysroot-deploy.c
+++ b/src/libostree/ostree-sysroot-deploy.c
@@ -123,22 +123,6 @@ install_into_boot (OstreeRepo *repo,
   if (!glnx_openat_rdonly (src_dfd, src_subpath, FALSE, &src_fd, error))
     return FALSE;
 
-  /* Be sure we relabel when copying the kernel, as in current
-    * e.g. Fedora it might be labeled module_object_t or usr_t,
-    * but policy may not allow other processes to read from that
-    * like kdump.
-    * See also https://github.com/fedora-selinux/selinux-policy/commit/747f4e6775d773ab74efae5aa37f3e5e7f0d4aca
-    * This means we also drop xattrs but...I doubt anyone uses
-    * non-SELinux xattrs for the kernel anyways aside from perhaps
-    * IMA but that's its own story.
-    */
-  g_auto(OstreeSepolicyFsCreatecon) fscreatecon = { 0, };
-  const char *boot_path = glnx_strjoina ("/boot/", glnx_basename (dest_subpath));
-  if (!_ostree_sepolicy_preparefscreatecon (&fscreatecon, sepolicy,
-                                            boot_path, S_IFREG | 0644,
-                                            error))
-    return FALSE;
-
   g_auto(GLnxTmpfile) tmp_dest = { 0, };
   if (!glnx_open_tmpfile_linkable_at (dest_dfd, ".", O_WRONLY | O_CLOEXEC,
                                       &tmp_dest, error))
@@ -1978,6 +1962,71 @@ install_deployment_kernel (OstreeSysroot   *sysroot,
       g_ptr_array_add (overlay_initrds, g_steal_pointer (&destpath));
     }
 
+    if (fstatat (kernel_layout->boot_dfd, ".ostree-bootcsumdir-source", &stbuf, 0) == 0)
+    {
+      g_auto(GLnxDirFdIterator) dfd_iter = { 0, };
+      if (!glnx_dirfd_iterator_init_at (kernel_layout->boot_dfd, ".", FALSE, &dfd_iter, error))
+        return FALSE;
+
+      while (TRUE)
+        {
+          struct dirent *dent;
+
+          if (!glnx_dirfd_iterator_next_dent (&dfd_iter, &dent, cancellable, error))
+            return FALSE;
+          if (dent == NULL)
+            break;
+
+          /* Skip special files - initramfs-* are handled separately */
+          if (g_str_has_prefix (dent->d_name, "initramfs-"))
+            continue;
+
+          /* Skip special kernel file - vmlinuz-<sha256sum> is handled separately */
+          if (g_str_has_prefix (dent->d_name, "vmlinuz-"))
+          {
+            const char *dash = strrchr (dent->d_name, '-');
+            if (ostree_validate_structureof_checksum_string (dash + 1, NULL))
+              continue;
+          }
+
+          if (fstatat (bootcsum_dfd, dent->d_name, &stbuf, AT_SYMLINK_NOFOLLOW) != 0)
+            {
+              if (errno != ENOENT)
+                {
+                  glnx_set_prefix_error_from_errno (error, "fstatat %s", dent->d_name);
+                  return FALSE;
+                }
+
+              if (fstatat (dfd_iter.fd, dent->d_name, &stbuf, AT_SYMLINK_NOFOLLOW) != 0)
+                {
+                  glnx_set_error_from_errno (error);
+                  return FALSE;
+                }
+              if (S_ISDIR (stbuf.st_mode))
+                {
+                  if (!copy_dir_recurse (kernel_layout->boot_dfd, bootcsum_dfd, dent->d_name,
+                                                     sysroot->debug_flags, cancellable, error))
+                    return FALSE;
+                }
+              else
+                {
+                  if (!install_into_boot (repo, sepolicy,kernel_layout->boot_dfd, dent->d_name,
+                                            bootcsum_dfd, dent->d_name,
+                                            cancellable, error))
+                    return FALSE;
+                }
+            }
+        }
+    }
+    else
+    {
+      if (errno != ENOENT)
+        {
+          glnx_set_prefix_error_from_errno (error, "fstatat %s", ".ostree-bootcsumdir-source");
+          return FALSE;
+         }
+     }
+
   g_autofree char *contents = NULL;
   if (!glnx_fstatat_allow_noent (deployment_dfd, "usr/lib/os-release", &stbuf, 0, error))
     return FALSE;
-- 
2.34.1

