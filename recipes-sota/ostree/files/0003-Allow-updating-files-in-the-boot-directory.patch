From 654f0df23e2590b29ebd26f10f5aeb42a822380c Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Tue, 22 Jan 2019 18:00:00 +0800
Subject: [PATCH 03/12] Allow updating files in the /boot directory

This patch adds support for copying (or hardlinking on
single partition systems) all files from the deployment's
/usr/lib/ostree-boot directory to the relevant
/boot/ostree/$os-$bootcsum/ directory. This feature can
be enabled by 'touch .ostree-bootcsumdir-source' in
/usr/lib/ostree-boot.
---
 src/libostree/ostree-sysroot-deploy.c | 169 ++++++++++++++++++--------
 1 file changed, 121 insertions(+), 48 deletions(-)

diff --git a/src/libostree/ostree-sysroot-deploy.c b/src/libostree/ostree-sysroot-deploy.c
index b16f65b3..1697a06e 100644
--- a/src/libostree/ostree-sysroot-deploy.c
+++ b/src/libostree/ostree-sysroot-deploy.c
@@ -96,42 +96,24 @@ sysroot_flags_to_copy_flags (GLnxFileCopyFlags defaults,
 }
 
 /* Try a hardlink if we can, otherwise fall back to copying.  Used
- * right now for kernels/initramfs/device trees in /boot, where we can just
+ * right now for kernels/initramfs in /boot, where we can just
  * hardlink if we're on the same partition.
  */
 static gboolean
-install_into_boot (OstreeSePolicy *sepolicy,
-                   int         src_dfd,
-                   const char *src_subpath,
-                   int         dest_dfd,
-                   const char *dest_subpath,
-                   OstreeSysrootDebugFlags flags,
-                   GCancellable  *cancellable,
-                   GError       **error)
+hardlink_or_copy_at (int         src_dfd,
+                     const char *src_subpath,
+                     int         dest_dfd,
+                     const char *dest_subpath,
+                     OstreeSysrootDebugFlags flags,
+                     GCancellable  *cancellable,
+                     GError       **error)
 {
   if (linkat (src_dfd, src_subpath, dest_dfd, dest_subpath, 0) != 0)
     {
       if (G_IN_SET (errno, EMLINK, EXDEV))
-        {
-          /* Be sure we relabel when copying the kernel, as in current
-           * e.g. Fedora it might be labeled module_object_t or usr_t,
-           * but policy may not allow other processes to read from that
-           * like kdump.
-           * See also https://github.com/fedora-selinux/selinux-policy/commit/747f4e6775d773ab74efae5aa37f3e5e7f0d4aca
-           * This means we also drop xattrs but...I doubt anyone uses
-           * non-SELinux xattrs for the kernel anyways aside from perhaps
-           * IMA but that's its own story.
-           */
-          g_auto(OstreeSepolicyFsCreatecon) fscreatecon = { 0, };
-          const char *boot_path = glnx_strjoina ("/boot/", glnx_basename (dest_subpath));
-          if (!_ostree_sepolicy_preparefscreatecon (&fscreatecon, sepolicy,
-                                                    boot_path, S_IFREG | 0644,
-                                                    error))
-            return FALSE;
-          return glnx_file_copy_at (src_dfd, src_subpath, NULL, dest_dfd, dest_subpath,
-                                    GLNX_FILE_COPY_NOXATTRS | GLNX_FILE_COPY_DATASYNC,
-                                    cancellable, error);
-        }
+        return glnx_file_copy_at (src_dfd, src_subpath, NULL, dest_dfd, dest_subpath,
+                                  sysroot_flags_to_copy_flags (0, flags),
+                                  cancellable, error);
       else
         return glnx_throw_errno_prefix (error, "linkat(%s)", dest_subpath);
     }
@@ -176,6 +158,15 @@ dirfd_copy_attributes_and_xattrs (int            src_parent_dfd,
   return TRUE;
 }
 
+static gboolean
+hardlink_or_copy_dir_recurse (int  src_parent_dfd,
+                  int              dest_parent_dfd,
+                  const char      *name,
+                  gboolean         hardlink,
+                  OstreeSysrootDebugFlags flags,
+                  GCancellable    *cancellable,
+                  GError         **error);
+
 static gboolean
 copy_dir_recurse (int              src_parent_dfd,
                   int              dest_parent_dfd,
@@ -183,6 +174,18 @@ copy_dir_recurse (int              src_parent_dfd,
                   OstreeSysrootDebugFlags flags,
                   GCancellable    *cancellable,
                   GError         **error)
+{
+    return hardlink_or_copy_dir_recurse (src_parent_dfd, dest_parent_dfd, name, FALSE, flags, cancellable, error);
+}
+
+static gboolean
+hardlink_or_copy_dir_recurse (int  src_parent_dfd,
+                  int              dest_parent_dfd,
+                  const char      *name,
+                  gboolean         hardlink,
+                  OstreeSysrootDebugFlags flags,
+                  GCancellable    *cancellable,
+                  GError         **error)
 {
   g_auto(GLnxDirFdIterator) src_dfd_iter = { 0, };
   glnx_autofd int dest_dfd = -1;
@@ -217,17 +220,28 @@ copy_dir_recurse (int              src_parent_dfd,
 
       if (S_ISDIR (child_stbuf.st_mode))
         {
-          if (!copy_dir_recurse (src_dfd_iter.fd, dest_dfd, dent->d_name,
-                                 flags, cancellable, error))
+          if (!hardlink_or_copy_dir_recurse (src_dfd_iter.fd, dest_dfd, dent->d_name,
+                                 hardlink, flags, cancellable, error))
             return FALSE;
         }
       else
         {
-          if (!glnx_file_copy_at (src_dfd_iter.fd, dent->d_name, &child_stbuf,
-                                  dest_dfd, dent->d_name,
-                                  sysroot_flags_to_copy_flags (GLNX_FILE_COPY_OVERWRITE, flags),
-                                  cancellable, error))
-            return FALSE;
+          if (hardlink)
+          {
+              if (!hardlink_or_copy_at (src_dfd_iter.fd, dent->d_name,
+                                        dest_dfd, dent->d_name, 
+                                        sysroot_flags_to_copy_flags (GLNX_FILE_COPY_OVERWRITE, flags), 
+                                        cancellable, error))
+                return FALSE;
+          }
+          else
+          {
+              if (!glnx_file_copy_at (src_dfd_iter.fd, dent->d_name, &child_stbuf,
+                                      dest_dfd, dent->d_name,
+                                      sysroot_flags_to_copy_flags (GLNX_FILE_COPY_OVERWRITE, flags),
+                                      cancellable, error))
+              return FALSE;
+           }
         }
     }
 
@@ -1602,6 +1616,7 @@ install_deployment_kernel (OstreeSysroot   *sysroot,
 
 {
   GLNX_AUTO_PREFIX_ERROR ("Installing kernel", error);
+  g_auto(GLnxDirFdIterator) dfd_iter = { 0, };
   OstreeBootconfigParser *bootconfig = ostree_deployment_get_bootconfig (deployment);
   g_autofree char *deployment_dirpath = ostree_sysroot_get_deployment_dirpath (sysroot, deployment);
   glnx_autofd int deployment_dfd = -1;
@@ -1650,10 +1665,11 @@ install_deployment_kernel (OstreeSysroot   *sysroot,
     return FALSE;
   if (errno == ENOENT)
     {
-      if (!install_into_boot (sepolicy, kernel_layout->boot_dfd, kernel_layout->kernel_srcpath,
-                              bootcsum_dfd, kernel_layout->kernel_namever,
-                              sysroot->debug_flags,
-                              cancellable, error))
+      if (!hardlink_or_copy_at (kernel_layout->boot_dfd,
+                                kernel_layout->kernel_srcpath,
+                                bootcsum_dfd, kernel_layout->kernel_namever,
+                                sysroot->debug_flags,
+                                cancellable, error))
         return FALSE;
     }
 
@@ -1667,10 +1683,10 @@ install_deployment_kernel (OstreeSysroot   *sysroot,
         return FALSE;
       if (errno == ENOENT)
         {
-          if (!install_into_boot (sepolicy, kernel_layout->boot_dfd, kernel_layout->initramfs_srcpath,
-                                  bootcsum_dfd, kernel_layout->initramfs_namever,
-                                  sysroot->debug_flags,
-                                  cancellable, error))
+          if (!hardlink_or_copy_at (kernel_layout->boot_dfd, kernel_layout->initramfs_srcpath,
+                                    bootcsum_dfd, kernel_layout->initramfs_namever,
+                                    sysroot->debug_flags,
+                                    cancellable, error))
             return FALSE;
         }
     }
@@ -1682,11 +1698,68 @@ install_deployment_kernel (OstreeSysroot   *sysroot,
         return FALSE;
       if (errno == ENOENT)
         {
-          if (!install_into_boot (sepolicy, kernel_layout->boot_dfd, kernel_layout->devicetree_srcpath,
-                                  bootcsum_dfd, kernel_layout->devicetree_namever,
-                                  sysroot->debug_flags,
-                                  cancellable, error))
+          if (!hardlink_or_copy_at (kernel_layout->boot_dfd, kernel_layout->initramfs_srcpath,
+                                    bootcsum_dfd, kernel_layout->devicetree_namever,
+                                    sysroot->debug_flags,
+                                    cancellable, error))
+            return FALSE;
+        }
+    }
+
+    if (fstatat (kernel_layout->boot_dfd, ".ostree-bootcsumdir-source", &stbuf, 0) == 0)
+    {
+      if (!glnx_dirfd_iterator_init_at (kernel_layout->boot_dfd, ".", FALSE, &dfd_iter, error))
+        return FALSE;
+
+      while (TRUE)
+        {
+          struct dirent *dent;
+
+          if (!glnx_dirfd_iterator_next_dent (&dfd_iter, &dent, cancellable, error))
             return FALSE;
+          if (dent == NULL)
+            break;
+
+          /* Skip special files - vmlinuz-* and initramfs-* are handled separately */
+          if (g_str_has_prefix (dent->d_name, "vmlinuz-") || g_str_has_prefix (dent->d_name, "initramfs-"))
+            continue;
+
+          if (fstatat (bootcsum_dfd, dent->d_name, &stbuf, AT_SYMLINK_NOFOLLOW) != 0)
+            {
+              if (errno != ENOENT)
+                {
+                  glnx_set_prefix_error_from_errno (error, "fstatat %s", dent->d_name);
+                  return FALSE;
+                }
+
+              if (fstatat (dfd_iter.fd, dent->d_name, &stbuf, AT_SYMLINK_NOFOLLOW) != 0)
+                {
+                  glnx_set_error_from_errno (error);
+                  return FALSE;
+                }
+
+              if (S_ISDIR (stbuf.st_mode))
+                {
+                  if (!hardlink_or_copy_dir_recurse (kernel_layout->boot_dfd, bootcsum_dfd, dent->d_name,
+                                                     TRUE, sysroot->debug_flags, cancellable, error))
+                    return FALSE;
+                }
+              else
+                {
+                  if (!hardlink_or_copy_at (kernel_layout->boot_dfd, dent->d_name,
+                                            bootcsum_dfd, dent->d_name, sysroot->debug_flags, 
+                                            cancellable, error))
+                    return FALSE;
+                }
+            }
+        }
+    }
+    else
+    {
+      if (errno != ENOENT)
+        {
+          glnx_set_prefix_error_from_errno (error, "fstatat %s", ".ostree-bootcsumdir-source");
+          return FALSE;
         }
     }
 
-- 
2.17.1

