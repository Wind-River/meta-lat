#!/bin/bash
set -x
set -e
## Require environments
# IMAGE_ROOTFS
# DEPLOY_DIR_IMAGE
# WORKDIR
# IMAGE_NAME
# MACHINE
# OSTREE_GPGID
# OSTREE_GPG_PASSPHRASE
# GPGPATH
# DEFAULT_INITRD_NAME
# OSTREE_KERNEL
# USE_FIT
# RAMDISK_EXT
# KERNEL_DEVICETREE
# EFI_SECURE_BOOT
# IS_FMU_ENABLED
# APP_DIRECTORY
OSTREE_REPO="${DEPLOY_DIR_IMAGE}/ostree_repo"
OSTREE_BRANCHNAME="${IMAGE_NAME}"
export TZ='UTC'
DATETIME="`date +"%Y%m%d%H%M%S"`"

SELINUX=""

if [ -z "${MANIFEST}" ]; then
  MANIFEST="${DEPLOY_DIR_IMAGE}/${IMAGE_NAME}-${MACHINE}.manifest"
fi
if [ $MACHINE = "intel-x86-64" ]; then
  GRUB_USED="true"
fi

do_image_ostree() {
	gpg_path="${GPGPATH}"
    gpg_bin=`which gpg`

	if [ -z "$OSTREE_REPO" ]; then
		bbfatal "OSTREE_REPO should be set in your local.conf"
	fi

	if [ -z "$OSTREE_BRANCHNAME" ]; then
		bbfatal "OSTREE_BRANCHNAME should be set in your local.conf"
	fi

	OSTREE_REPO_TEMP="${WORKDIR}/ostree_repo.temp.$$"
	OSTREE_ROOTFS=`mktemp -du ${WORKDIR}/ostree-root-XXXXX`
	cp -a ${IMAGE_ROOTFS} ${OSTREE_ROOTFS}
	if [ "${IS_FMU_ENABLED}" = "true" ]; then
		rm -rf ${OSTREE_ROOTFS}${APP_DIRECTORY}/*
	fi
	chmod a+rx ${OSTREE_ROOTFS}
	sync

	cd ${OSTREE_ROOTFS}

	# Create sysroot directory to which physical sysroot will be mounted
	mkdir sysroot
	ln -sf sysroot/ostree ostree

	rm -rf tmp/*
	ln -sf sysroot/tmp tmp

	mkdir -p usr/rootdirs

	mv etc usr/
	# Implement UsrMove
	dirs="bin sbin lib lib64"

	for dir in ${dirs} ; do
		if [ -d ${dir} ] && [ ! -L ${dir} ] ; then
			mv ${dir} usr/rootdirs/
			rm -rf ${dir}
			ln -sf usr/rootdirs/${dir} ${dir}
		fi
	done

	mkdir -p usr/etc/tmpfiles.d
	tmpfiles_conf=usr/etc/tmpfiles.d/00ostree-tmpfiles.conf
	echo "d /var/rootdirs 0755 root root -" >>${tmpfiles_conf}
	# disable the annoying logs on the console
	echo "w /proc/sys/kernel/printk - - - - 3" >> ${tmpfiles_conf}

	# Preserve data in /home to be later copied to /var/home by
	#   sysroot generating procedure
	mkdir -p usr/homedirs
	if [ -d "home" ] && [ ! -L "home" ]; then
		mv home usr/homedirs/home
		mkdir -p var/home
		ln -sf var/home home
		echo "d /var/home 0755 root root -" >>${tmpfiles_conf}
	fi

	echo "d /var/rootdirs/opt 0755 root root -" >>${tmpfiles_conf}
	if [ -d opt ]; then
		mkdir -p usr/rootdirs/opt
		for dir in `ls opt`; do
			mv opt/$dir usr/rootdirs/opt/
			echo "L /opt/$dir - - - - /usr/rootdirs/opt/$dir" >>${tmpfiles_conf}
		done
	fi
	rm -rf opt
	ln -sf var/rootdirs/opt opt

	if [ -d var/lib/rpm ]; then
	    mkdir -p usr/rootdirs/var/lib/
	    mv var/lib/rpm usr/rootdirs/var/lib/
	    echo "L /var/lib/rpm - - - - /usr/rootdirs/var/lib/rpm" >>${tmpfiles_conf}
	fi
	if [ -d var/lib/dnf ]; then
	    mkdir -p usr/rootdirs/var/lib/
	    mv var/lib/dnf usr/rootdirs/var/lib/
	    echo "L /var/lib/dnf - - - - /usr/rootdirs/var/lib/dnf " >>${tmpfiles_conf}
	fi

	# Move persistent directories to /var
	dirs="mnt media srv"

	for dir in ${dirs}; do
		if [ -d ${dir} ] && [ ! -L ${dir} ]; then
			if [ "$(ls -A $dir)" ]; then
				bbwarn "Data in /$dir directory is not preserved by OSTree. Consider moving it under /usr"
			fi
			echo "d /var/rootdirs/${dir} 0755 root root -" >>${tmpfiles_conf}
			rm -rf ${dir}
			ln -sf var/rootdirs/${dir} ${dir}
		fi
	done

	if [ -d root ] && [ ! -L root ]; then
		if [ "$(ls -A root)" ]; then
			bberror "Data in /root directory is not preserved by OSTree."
		fi
		echo "d /var/rootdirs/root 0755 root root -" >>${tmpfiles_conf}
		rm -rf root
		ln -sf var/rootdirs/root root
	fi

	# deploy SOTA credentials
	if [ -n "${SOTA_AUTOPROVISION_CREDENTIALS}" ]; then
		EXPDATE=`openssl pkcs12 -in ${SOTA_AUTOPROVISION_CREDENTIALS} -password "pass:" -nodes 2>/dev/null | openssl x509 -noout -enddate | cut -f2 -d "="`

		if [ `date +%s` -ge `date -d "${EXPDATE}" +%s` ]; then
			bberror "Certificate ${SOTA_AUTOPROVISION_CREDENTIALS} has expired on ${EXPDATE}"
		fi

		mkdir -p var/sota
		cp ${SOTA_AUTOPROVISION_CREDENTIALS} var/sota/sota_provisioning_credentials.p12
		if [ -n "${SOTA_AUTOPROVISION_URL_FILE}" ]; then
			export SOTA_AUTOPROVISION_URL=`cat ${SOTA_AUTOPROVISION_URL_FILE}`
		fi
		echo "SOTA_GATEWAY_URI=${SOTA_AUTOPROVISION_URL}" > var/sota/sota_provisioning_url.env
	fi


	# Creating boot directories is required for "ostree admin deploy"

	mkdir -p boot/loader.0
	mkdir -p boot/loader.1
	ln -sf boot/loader.0 boot/loader

	checksum=`sha256sum $DEPLOY_DIR_IMAGE/${OSTREE_KERNEL} | cut -f 1 -d " "`


	#deploy the device tree file
	mkdir -p usr/lib/ostree-boot
	cp $DEPLOY_DIR_IMAGE/${OSTREE_KERNEL} usr/lib/ostree-boot/vmlinuz-${checksum}
	if [ "${USE_FIT}" != "1" ]; then
		cp $DEPLOY_DIR_IMAGE/${DEFAULT_INITRD_NAME}-${MACHINE}${RAMDISK_EXT} usr/lib/ostree-boot/initramfs-${checksum}
	else
		# Workaround ostree
		touch usr/lib/ostree-boot/initramfs-${checksum}
	fi

	if [ "${EFI_SECURE_BOOT}" = "enable" ]; then
		if [ -f $DEPLOY_DIR_IMAGE/${OSTREE_KERNEL}.p7b ] ; then
			cp $DEPLOY_DIR_IMAGE/${OSTREE_KERNEL}.p7b usr/lib/ostree-boot/vmlinuz.p7b
			cp $DEPLOY_DIR_IMAGE/${DEFAULT_INITRD_NAME}-${MACHINE}${RAMDISK_EXT}.p7b usr/lib/ostree-boot/initramfs.p7b
		fi
		if [ -f $DEPLOY_DIR_IMAGE/${OSTREE_KERNEL}.sig ] ; then
			cp $DEPLOY_DIR_IMAGE/${OSTREE_KERNEL}.sig usr/lib/ostree-boot/vmlinuz.sig
			cp $DEPLOY_DIR_IMAGE/${DEFAULT_INITRD_NAME}-${MACHINE}${RAMDISK_EXT}.sig usr/lib/ostree-boot/initramfs.sig
		fi
	fi
	if [ -d boot/efi ]; then
		cp -a boot/efi usr/lib/ostree-boot/
	fi

	if [ -f $DEPLOY_DIR_IMAGE/uEnv.txt ]; then
		cp $DEPLOY_DIR_IMAGE/uEnv.txt usr/lib/ostree-boot/
	fi

	if [ -f $DEPLOY_DIR_IMAGE/boot.scr ]; then
		cp $DEPLOY_DIR_IMAGE/boot.scr usr/lib/ostree-boot/boot.scr
		# Modify the boot.scr
		if [ -e usr/lib/ostree-boot/boot.scr ] ; then
			tail -c+73 usr/lib/ostree-boot/boot.scr > usr/lib/ostree-boot/boot.scr.raw
			if [ -e /bin/perl ] ; then
				/bin/perl -p -i -e "s#^( *setenv BRANCH) .*#\$1 ${OSTREE_BRANCHNAME}# if (\$_ !~ /oBRANCH/) " usr/lib/ostree-boot/boot.scr.raw
			else
				/usr/bin/perl -p -i -e "s#^( *setenv BRANCH) .*#\$1 ${OSTREE_BRANCHNAME}# if (\$_ !~ /oBRANCH/) " usr/lib/ostree-boot/boot.scr.raw
			fi
			mkimage -A arm -T script -O linux -d usr/lib/ostree-boot/boot.scr.raw usr/lib/ostree-boot/boot.scr
			if [ -f $DEPLOY_DIR_IMAGE/boot.itb ]; then
				mkimage -A arm -T script -O linux -f auto -C none -d usr/lib/ostree-boot/boot.scr.raw usr/lib/ostree-boot/boot.itb
			fi
			rm -f usr/lib/ostree-boot/boot.scr.raw
		fi
		mkdir -p boot
		cp usr/lib/ostree-boot/boot.scr boot/
	fi

	for i in ${KERNEL_DEVICETREE}; do
		if [ -f $DEPLOY_DIR_IMAGE/$(basename $i) ]; then
			if [ "$(dirname $i)" = "overlays" ] ; then
				[ ! -d usr/lib/ostree-boot/overlays ] && mkdir -p usr/lib/ostree-boot/overlays
				cp $DEPLOY_DIR_IMAGE/$(basename $i) usr/lib/ostree-boot/overlays
			else
				cp $DEPLOY_DIR_IMAGE/$(basename $i) usr/lib/ostree-boot/
			fi
		fi
	done

	#deploy the GPG pub key
	if [ -n "${OSTREE_GPGID}" ]; then
		if [ -f $gpg_path/pubring.gpg ]; then
			cp $gpg_path/pubring.gpg usr/share/ostree/trusted.gpg.d/pubring.gpg
		fi
		if [ -f $gpg_path/pubring.kbx ]; then
			cp $gpg_path/pubring.kbx usr/share/ostree/trusted.gpg.d/pubkbx.gpg
		fi
	fi

	touch usr/lib/ostree-boot/.ostree-bootcsumdir-source

	# Copy image manifest
	cat $MANIFEST | cut -d " " -f1,3 > usr/package.manifest

	# add the required mount
	echo "LABEL=otaboot     /boot    auto   defaults 0 0" >>usr/etc/fstab
	if [ -n "${GRUB_USED}" ]; then
		echo "LABEL=otaefi     /boot/efi    auto   ro 0 0" >>usr/etc/fstab
	fi
	echo "LABEL=fluxdata	 /var    auto   defaults 0 0" >>usr/etc/fstab
	if [ "${IS_FMU_ENABLED}" = "true" ]; then
		echo "LABEL=apps    /apps  auto   defaults 0 0" >>usr/etc/fstab
	fi

	cd $WORKDIR

	rm -rf ${OSTREE_REPO_TEMP}
	ostree --repo=${OSTREE_REPO_TEMP} init --mode=bare
	if [ ! -d ${OSTREE_REPO} ]; then
		 flock ${OSTREE_REPO}.lock ostree --repo=${OSTREE_REPO} init --mode=archive-z2
	else
		 ostree pull-local --repo=${OSTREE_REPO_TEMP} ${OSTREE_REPO} ${OSTREE_BRANCHNAME} || (exit 0)
	fi

	# Preserve OSTREE_BRANCHNAME for future information
	mkdir -p ${OSTREE_ROOTFS}/usr/share/sota/

	if [ -n "${SELINUX}" ]; then
		selinux_set_labels
	fi

	timestamp=`date +%s`
	echo -n "${OSTREE_BRANCHNAME}" > ${OSTREE_ROOTFS}/usr/share/sota/branchname
	create_tarball_and_ostreecommit "${OSTREE_BRANCHNAME}" "$timestamp"

	rm -rf ${OSTREE_REPO_TEMP}

	flock ${OSTREE_REPO}.lock ostree summary -u --repo=${OSTREE_REPO}

	rm -rf ${OSTREE_ROOTFS}
}

create_tarball_and_ostreecommit() {
	local _image_basename=$1
	local _timestamp=$2

	# The timestamp format of ostree requires
	_timestamp=`LC_ALL=C date --date=@$_timestamp`

	# Commit the result
	if [ -z ${OSTREE_GPGID} ]; then
		bbwarn "You are using an unsupported configuration by using ostree repo without gpg. " \
		       "This usually indicates a failure to find /usr/bin/gpg, " \
		       "or you tried to use an invalid GPG database.  " \
		       "It could also be possible that OSTREE_GPGID, OSTREE_GPG_PASSPHRASE, " \
		       "OSTREE_GPGDIR has a bad value."
		 ostree --repo=${OSTREE_REPO_TEMP} commit \
			--tree=dir=${OSTREE_ROOTFS} \
			--skip-if-unchanged \
			--branch=${_image_basename} \
			--timestamp=${_timestamp} \
			--subject="Commit-id: ${_image_basename}-${MACHINE}-${DATETIME}"
		# Pull new commmit into old repo
		flock ${OSTREE_REPO}.lock  ostree --repo=${OSTREE_REPO} pull-local ${OSTREE_REPO_TEMP} ${_image_basename}
	else
		# Setup gpg key for signing
		if [ -n "${OSTREE_GPGID}" ] && [ -n "${OSTREE_GPG_PASSPHRASE}" ] && [ -n "$gpg_path" ] ; then
			gpg_ver=`$gpg_bin --version | head -1 | awk '{ print $3 }' | awk -F. '{ print $1 }'`
			echo '#!/bin/bash' > ${WORKDIR}/gpg
			echo 'exarg=""' >> ${WORKDIR}/gpg
			if [ "$gpg_ver" = "1" ] ; then
				# GPGME has to be tricked into running a helper script to provide a passphrase when using gpg 1
				echo 'echo "$@" |grep -q batch && exarg="--passphrase ${OSTREE_GPG_PASSPHRASE}"' >> ${WORKDIR}/gpg
			elif [ "$gpg_ver" = "2" ] ; then
				gpg_connect=$(dirname $gpg_bin)/gpg-connect-agent
				if [ ! -f $gpg_connect ] ; then
					bbfatal "ERROR Could not locate gpg-connect-agent at: $gpg_connect"
				fi
				if [ -f "$gpg_path/gpg-agent.conf" ] ; then
					if ! grep -q allow-loopback-pin "$gpg_path/gpg-agent.conf" ; then
						echo allow-loopback-pinentry >> "$gpg_path/gpg-agent.conf"
						$gpg_connect --homedir $gpg_path reloadagent /bye
					fi
				else
					echo allow-loopback-pinentry > "$gpg_path/gpg-agent.conf"
					$gpg_connect --homedir $gpg_path reloadagent /bye
				fi
				$gpg_bin --homedir=$gpg_path -o /dev/null -u "${OSTREE_GPGID}" --pinentry=loopback --passphrase ${OSTREE_GPG_PASSPHRASE} -s /dev/null
			fi
			echo "exec $gpg_bin \$exarg \$@" >> ${WORKDIR}/gpg
			chmod 700 ${WORKDIR}/gpg
		fi
		if [ -n "${SELINUX}" ]; then
			 PATH="${WORKDIR}:$PATH" ostree --repo=${OSTREE_REPO_TEMP} commit \
				--tree=dir=${OSTREE_ROOTFS} \
				--selinux-policy ${OSTREE_ROOTFS} \
				--skip-if-unchanged \
				--gpg-sign="${OSTREE_GPGID}" \
				--gpg-homedir=$gpg_path \
				--branch=${_image_basename} \
				--timestamp="${_timestamp}" \
				--subject="Commit-id: ${_image_basename}-${MACHINE}-${DATETIME}"
		else
			 PATH="${WORKDIR}:$PATH" ostree --repo=${OSTREE_REPO_TEMP} commit \
				--tree=dir=${OSTREE_ROOTFS} \
				--skip-if-unchanged \
				--gpg-sign="${OSTREE_GPGID}" \
				--gpg-homedir=$gpg_path \
				--branch=${_image_basename} \
				--timestamp="${_timestamp}" \
				--subject="Commit-id: ${_image_basename}-${MACHINE}-${DATETIME}"
			#exit 1
		fi
		# Pull new commmit into old repo
		  flock ${OSTREE_REPO}.lock ostree --repo=${OSTREE_REPO} pull-local ${OSTREE_REPO_TEMP} ${_image_basename}

		gpgconf=$(dirname $gpg_bin)/gpgconf
		if [ ! -f $gpgconf ] ; then
			bbfatal "ERROR Could not find $gpgconf"
		fi
		GNUPGHOME="$gpg_path" flock ${OSTREE_REPO}.lock $gpgconf --kill gpg-agent
	fi
}

bbfatal() {
	echo "ERROR: $*"
	exit 1
}

bberror() {
	echo "ERROR: $*"
	exit 1
}

selinux_set_labels() {
    touch ${OSTREE_ROOTFS}/usr//etc/selinux/fixfiles_exclude_dirs
    echo "/ostree" >> ${OSTREE_ROOTFS}/usr//etc/selinux/fixfiles_exclude_dirs
    echo "/sysroot" >> ${OSTREE_ROOTFS}/usr//etc/selinux/fixfiles_exclude_dirs
    mv ${OSTREE_ROOTFS}/.autorelabel ${OSTREE_ROOTFS}/usr//etc
    sed -i '\/bin\/rm/a \\t/usr/sbin/setfiles -F -q  /etc/selinux/wr-mls/contexts/files/file_contexts /etc' ${OSTREE_ROOTFS}/usr/bin/selinux-autorelabel.sh
    sed -i "s/.autorelabel/etc\/.autorelabel/g" ${OSTREE_ROOTFS}/usr/bin/selinux-autorelabel.sh

    POL_TYPE=$(sed -n -e "s&^SELINUXTYPE[[:space:]]*=[[:space:]]*\([0-9A-Za-z_]\+\)&\1&p" ${OSTREE_ROOTFS}/usr//etc/selinux/config)
    if ! setfiles -m -r ${OSTREE_ROOTFS} ${OSTREE_ROOTFS}/usr//etc/selinux/${POL_TYPE}/contexts/files/file_contexts ${OSTREE_ROOTFS}
    then
        bbfatal "selinux_set_labels error."
        exit 0
    fi
}

bbwarn() {
	echo "WARNING: $*"
}

do_image_ostree

ret=$?
exit $ret
