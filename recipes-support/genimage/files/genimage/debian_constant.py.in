#
# Copyright (c) 2021 Wind River Systems, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
DEFAULT_IMAGE = "debian-image-base"

DEFAULT_INITRD_NAME = "debian-initramfs-ostree-image"

DEFAULT_CONTAINER_NAME = "debian-container-base"

DEFAULT_DEBIAN_DISTROS = "bullseye buster".split()

DEFAULT_DEBIAN_MIRROR = "${DEFAULT_DEBIAN_MIRROR}"

CHROOT_PATH = "/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"

SCRIPT_DEBIAN_CUSTOMIZE_INSTALL = '''\
# The StarlingX customize pacakges includes:
# - ostree 2019.1
export PATH={0}
chroot $IMAGE_ROOTFS bash << SCRIPT_ENDOF
set -e
apt update
apt install -y --no-install-recommends linux-image-amd64 linux-image-rt-amd64 grub-common
apt install -y --allow-downgrades --allow-unauthenticated --no-install-recommends \
    ostree=${DEBIAN_OSTREE_VERSION} \
    ostree-boot=${DEBIAN_OSTREE_VERSION} \
    libostree-1-1=${DEBIAN_OSTREE_VERSION} \
    ostree-upgrade-mgr
apt install --no-install-recommends -y network-manager
SCRIPT_ENDOF
'''.format(CHROOT_PATH)

SCRIPT_DEBIAN_ADD_ADMIN = '''\
# Remove user admin whether it exists or not
# Add a new user and create user's home directory
# Add the user to sudo group
# Username: admin
# Password: 123456
export PATH={0}
chroot $IMAGE_ROOTFS deluser admin
chroot $IMAGE_ROOTFS useradd admin -m --shell /bin/bash -G sudo --password '$6$YcX9PtwnWDeeZfLG$NO64/Frq0xXcMVLKFXqdKxdwBBF42I5TpEiaWfnuj6u6V5GMb0XCASZE7bG4Iiof8QtttCAN4F6xpdNhldIJl/'\
'''.format(CHROOT_PATH)

SCRIPT_DEBIAN_SET_ROOT_PASSWORD = '''\
# Set password 'root' to root"
export PATH={0}
chroot $IMAGE_ROOTFS usermod -p '$6$hEv/K.fPeg/$ezIWhJPrMG3WtdEwqQRdyBwdYmPZkqW2PONFAcDd6TqWliYc9dHAwW4MFTlLanVH3/clE0/34FheDMpbAqZVG.' root;\
'''.format(CHROOT_PATH)

SCRIPT_DEBIAN_SSH_ROOT_LOGIN = '''\
# Allow root ssh login
export PATH={0}
if [ -e $IMAGE_ROOTFS/etc/ssh/sshd_config ]; then
    chroot $IMAGE_ROOTFS sed -i 's/^[#[:space:]]*PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
fi\
'''.format(CHROOT_PATH)


SCRIPT_DEBIAN_SET_BASH = '''\
# Set bash as default shell
ln -snf --relative $IMAGE_ROOTFS/bin/bash $IMAGE_ROOTFS/bin/sh\
'''

SCRIPT_DEBIAN_SET_MISC = '''\
# Set hostname
echo "intel-x86-64" > $IMAGE_ROOTFS/etc/hostname

# Clean up dead link
rm -rf $IMAGE_ROOTFS/initrd.img* $IMAGE_ROOTFS/vmlinuz*
'''

DEFAULT_PACKAGES = '''
    ifupdown
    iproute2
    isc-dhcp-client
    isc-dhcp-common
    apt-utils
    fdisk
    kmod
    rsyslog
    openssh-client
    openssh-server
    procps
    net-tools
    vim
    lvm2
'''.split()

DEFAULT_APT_PREFERENCE = '''\
Package: *
Pin: origin {0}
Pin-Priority: 1024\
'''.format("${DEBIAN_CUSTOMIZE_FEED_URI}".replace("http://", "").split("/")[0])

SCRIPT_DEBIAN_INITRD_REDUCE_SIZE = '''\
# Reduce rootfs size AMAP
export PATH={0}
chroot $IMAGE_ROOTFS bash << SCRIPT_ENDOF
set -x
rm -rf /boot/*
rm -rf /var/lib/* /var/cache/*
rm -rf /usr/share/locale /usr/share/man /usr/share/doc /usr/share/zoneinfo /usr/share/vim

# Clean up dead link
rm -rf /initrd.img* /vmlinuz*
SCRIPT_ENDOF\
'''.format(CHROOT_PATH)

OSTREE_INITRD_PACKAGES = '''
    base-passwd bash busybox parted
    udhcpc bzip2 ca-certificates
    curl dosfstools e2fsprogs
    findutils gawk glib-networking
    gnupg grep gzip  initramfs-ostree
    kbd kmod mdadm mttyexec watchdog
    pv rng-tools sed eject efibootmgr
    ostree=${DEBIAN_OSTREE_VERSION}
    ostree-boot=${DEBIAN_OSTREE_VERSION}
    libostree-1-1=${DEBIAN_OSTREE_VERSION}
    tar udev util-linux fdisk mount lvm2
    linux-image-amd64 grub2 psmisc procps
    linux-image-rt-amd64
    ifupdown iproute2 isc-dhcp-client isc-dhcp-common
'''.split()

DEFAULT_CONTAINER_PACKAGES = '''
    openssh-client
    openssh-server
    net-tools
    vim
    debootstrap
'''.split()

DEFAULT_OSTREE_DATA = {
  'ostree_use_ab': '${OSTREE_USE_AB}',
  'ostree_osname': '${OSTREE_OSNAME}',
  'ostree_skip_boot_diff': '2',
  'ostree_remote_url': '',
  'ostree_install_device': '',
  'ostree_extra_install_args':'',
  'install_kickstart_url':'',
  'install_net_params':'',
  'install_net_mode':'',
  'OSTREE_GRUB_USER': 'root',
  'OSTREE_GRUB_PW_FILE': '$OECORE_NATIVE_SYSROOT/usr/share/bootfs/boot_keys/ostree_grub_pw',
  'OSTREE_FDISK_BLM': int('${OSTREE_FDISK_BLM}'),
  'OSTREE_FDISK_BSZ': int('1024'),
  'OSTREE_FDISK_RSZ': int('8192'),
  'OSTREE_FDISK_VSZ': int('${OSTREE_FDISK_VSZ}'),
  'OSTREE_FDISK_FSZ': int('${OSTREE_FDISK_FSZ}'),
  'OSTREE_CONSOLE': 'console=ttyS0,115200 console=tty1',
}

MULTIPLE_KERNELS = 'vmlinuz-*[!t]-amd64 vmlinuz-*-rt-amd64'
DEFAULT_KERNEL = 'vmlinuz-*[!t]-amd64'

SCRIPT_DEBIAN_INSTALL_PXE = '''\
cd ${ISO_DIR}

# 1. Kickstart
mkdir -p kickstart
# 1.1 Kickstart example for PXE
cat << ENDOF > kickstart/pxe-ks.cfg
lat-disk --install-device=/dev/disk/by-path/pci-0000:af:00.0-scsi-0:2:0:0
ENDOF

# 1.2 Kickstart example for ISO
cat << ENDOF > kickstart/iso-ks.cfg
lat-disk --install-device=/dev/sda
ENDOF

# 2. PXE
mkdir -p pxeboot/pxelinux.cfg

# 2.1 Kernel and initramfs
install -m 644 bzImage*  pxeboot
install -m 644 initrd* pxeboot

# 2.2 Bootloader
# 2.2.1 Legacy BIOS PXE
cp $OECORE_TARGET_SYSROOT/usr/share/syslinux/pxelinux.0 pxeboot/
cp isolinux/isolinux.cfg pxeboot/pxelinux.cfg/default
for f in libcom32.c32 ldlinux.c32 libutil.c32 vesamenu.c32; do
  cp isolinux/$f pxeboot/
done

# 2.2.2 EFI PXE
cp -a EFI pxeboot
if [ -e $OECORE_TARGET_SYSROOT/boot/efi/EFI/BOOT/bootx64-nosig.efi ]; then
  cp $OECORE_TARGET_SYSROOT/boot/efi/EFI/BOOT/bootx64-nosig.efi pxeboot/EFI/BOOT/
fi

# 2.3 Edit grub.cfg and pxelinux.cfg/default
# 2.3.1 Drop to install from local ostree repo
sed -i "s#instl=/ostree_repo#@BOOTPARAMS@#g" \\
  pxeboot/EFI/BOOT/grub.cfg \\
  pxeboot/pxelinux.cfg/default

# 2.3.2 Install from remote ostree repo
sed -i "s#insturl=file://NOT_SET#insturl=http://pxecontroller:8080/feed/debian/ostree_repo#g" \\
  pxeboot/EFI/BOOT/grub.cfg \\
  pxeboot/pxelinux.cfg/default

# 2.3.3 Configure kickstart url
BOOT_PARAMS="ks=http://pxecontroller:8080/feed/debian/kickstart/pxe-ks.cfg"

# 2.3.4 Verbose installation
BOOT_PARAMS="${BOOT_PARAMS} instsh=2"

# 2.3.5 Update boot params
sed -i "s#@BOOTPARAMS@#${BOOT_PARAMS}#g" \\
  pxeboot/EFI/BOOT/grub.cfg \\
  pxeboot/pxelinux.cfg/default

# 2.3.6 Add `Boot from hard drive' entry to grub.cfg
cat <<ENDOF>> pxeboot/EFI/BOOT/grub.cfg

menuentry 'UEFI Boot from hard drive' {
    search --set=root --label otaefi
    configfile /efi/boot/grub.cfg
}
ENDOF

# 2.4 Tweak PXE if EFI secure boot enabled
if [ "$EFI_SECURE_BOOT" = enable ]; then
  # On some host, PXE make bootx64.efi search grubx64.efi
  # from tftp/ dir other than tftp/EFI/BOOT/
  install -m 0644 EFI/BOOT/grubx64.efi pxeboot/

  # Resign grub.cfg
  rm pxeboot/EFI/BOOT/grub.cfg.sig
  echo 'SecureCore' | gpg  --pinentry-mode loopback \\
                           --batch \\
                           --homedir /tmp/.lat_gnupg_root \\
                           -u SecureBootCore \\
                           --detach-sign \\
                           --passphrase-fd 0 \\
                           pxeboot/EFI/BOOT/grub.cfg
fi

# 3. ISO
# 3.1 Edit grub.cfg and isolinux.cfg
# 3.1.1 Configure local kickstart url
BOOT_PARAMS="ks=file:///kickstart/iso-ks.cfg"

# 3.1.2 Verbose installation
BOOT_PARAMS="${BOOT_PARAMS} instsh=2"

# 3.1.3 Update boot params
sed -i "s#instl=/ostree_repo#& ${BOOT_PARAMS}#g" \\
  EFI/BOOT/grub.cfg \\
  isolinux/isolinux.cfg

# 3.2 Resign grub.cfg if EFI secure boot enabled
if [ "$EFI_SECURE_BOOT" = enable ]; then
  rm EFI/BOOT/grub.cfg.sig
  echo 'SecureCore' | gpg  --pinentry-mode loopback \\
                           --batch \\
                           --homedir /tmp/.lat_gnupg_root \\
                           -u SecureBootCore \\
                           --detach-sign \\
                           --passphrase-fd 0 \\
                           EFI/BOOT/grub.cfg
fi
'''

