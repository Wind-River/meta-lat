#
# Copyright (c) 2022 Wind River Systems, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
import getpass

DEFAULT_MACHINE = "${MACHINE}"
DEFAULT_FIT_IMAGE_NAME = "${LAT_DEFAULT_IMAGE}-fit"
DEFAULT_FIT_CONFIG = '''\
/dts-v1/;
/ {
      description = "Fit image: linux + initramfs + fdtb";
      #address-cells = <1>;
      images {
          lx-kernel {
              description = "Linux kernel";
              data = /incbin/("@lx-kernel@");
              type = "kernel";
              arch = "arm64";
              os = "linux";
              compression = "gzip";
              load = <0x80000000>;
              entry = <0x80000000>;
              hash-1 {
                  algo = "sha1";
              };
          };
          lx-fdtb {
              description = "Flattened Device Tree blob";
              data = /incbin/("@lx-fdtb@");
              type = "flat_dt";
              arch = "arm64";
              compression = "none";
              load =<0x83000000>;
              hash-1 {
                 algo = "sha1";
              };
          };
          lx-initrd {
              description = "Ostree initrd";
              data = /incbin/("@lx-initrd@");
              type = "ramdisk";
              arch = "arm64";
              os = "linux";
              compression = "none";
              load = <0x85010000>;
              entry = <0x85010000>;
              hash {
                  algo = "sha1";
              };
          };
      };

      configurations {
          default = "conf-linux";
          conf-linux {
              description = "Linux";
              kernel = "lx-kernel";
              fdt = "lx-fdtb";
              ramdisk = "lx-initrd";
              hash-1 {
                  algo = "sha1";
              };
          };
      };
  };
'''

DEFAULT_WIC_CONFIG = '''\
bootloader --ptable msdos
part / --source rootfs --rootfs-dir=${LAT_WORKDIR}/rootfs_ota_uboot --ondisk mmcblk --fstype=vfat --label boot --active --align 10240 --size=32M --overhead-factor 1
part / --source rootfs --rootfs-dir=${LAT_WORKDIR}/rootfs_ota_boot --ondisk mmcblk --fstype=ext4 --label otaboot --align 4 --type logical --size=512M --overhead-factor 1
part / --source rootfs --rootfs-dir=${LAT_WORKDIR}/rootfs_ota --ondisk mmcblk --fstype=ext4 --label otaroot --align 4 --type logical --size=2048M --overhead-factor 1
part / --source rootfs --rootfs-dir=${LAT_WORKDIR}/rootfs_ota_boot --ondisk mmcblk --fstype=ext4 --label otaboot_b --align 4 --type logical --size=512M --overhead-factor 1
part / --source rootfs --rootfs-dir=${LAT_WORKDIR}/rootfs_ota --ondisk mmcblk --fstype=ext4 --label otaroot_b --align 4 --type logical --size=2048M --overhead-factor 1
part / --source rootfs --rootfs-dir=${LAT_WORKDIR}/vxapp --ondisk mmcblk --fstype=ext4 --label vxapp --align 4 --type logical --size=64M --overhead-factor 1
part / --source rootfs --rootfs-dir=${LAT_WORKDIR}/vxapp --ondisk mmcblk --fstype=ext4 --label vxapp_b --align 4 --type logical --size=64M --overhead-factor 1
part / --source rootfs --rootfs-dir=${LAT_WORKDIR}/rootfs_ota_var --ondisk mmcblk --fstype=ext4 --label fluxdata --align 4
'''

DEFAULT_DEPLOY_URL = "${DEPLOY_URIS}/${DEPLOY_BASE_PATHS}"
DEFAULT_BOOT_ATF = "${DEPLOY_URIS}/${DEPLOY_BASE_PATHS}/atf-${MACHINE}.s32"
DEFAULT_BOOT_SCR = '${DEPLOY_URIS}/${DEPLOY_BASE_PATHS}/boot.scr'
DEFAULT_BOOT_SCR_PRE = 'setenv load_fitimage_addr 0xE0000000; '
DEFAULT_FIT_INPUTS = {
  'lx-kernel': '${DEPLOY_URIS}/${DEPLOY_BASE_PATHS}/Image.gz',
  'lx-initrd': '${DEPLOY_URIS}/${DEPLOY_BASE_PATHS}/${OSTREE_INITRAMFS_IMAGE}-${MACHINE}.cpio.gz',
  'lx-fdtb': '${DEPLOY_URIS}/${DEPLOY_BASE_PATHS}/${FIT_LX_FDT}',
  'vx-kernel': None,
  'hvp': None,
  'hvp-b': None,
}

DEFAULT_ROOTFS_IMAGES = {
  'lx-rootfs': '${DEPLOY_URIS}/${DEPLOY_BASE_PATHS}/${LAT_DEFAULT_IMAGE}-${MACHINE}.tar.bz2',
  'lx-manifest': '${DEPLOY_URIS}/${DEPLOY_BASE_PATHS}/${LAT_DEFAULT_IMAGE}-${MACHINE}.manifest',
  'vx-app': None
}

DEFAULT_GPG_DATA = {
  'gpg_path':'/tmp/.lat_gnupg_%s'%getpass.getuser(),
  'ostree': {
    'gpgid': 'Wind-River-Linux-Sample',
    'gpgkey': '$OECORE_NATIVE_SYSROOT/usr/share/genimage/rpm_keys/RPM-GPG-PRIVKEY-Wind-River-Linux-Sample',
    'gpg_password': 'windriver'
  },
}

DEFAULT_ENNVIRONMENTS = [
  'KEY=VALUE',
]

DEFAULT_LX_ROOTFS_SCRIPT = '''\
#!/usr/bin/env bash
set -x
set -e
lx_rootfs="@lx-rootfs@"
if [ "${lx_rootfs%.tar.bz2}" != "${lx_rootfs}" ]; then
    rm -rf $IMAGE_ROOTFS
    mkdir -p $IMAGE_ROOTFS
    cd $IMAGE_ROOTFS
    tar -xf @lx-rootfs@ .
fi
cp -f @lx-manifest@ $DEPLOY_DIR_IMAGE/
'''
DEFAULT_VX_APP_SCRIPT = 'echo "run vx do_rootfs script in $IMAGE_ROOTFS"'
DEFAULT_WIC_POST_SCRIPT = '''\
#!/usr/bin/env bash
set -x
set -e
atf_s32="$DEPLOY_DIR_IMAGE/downloads/atf-${MACHINE}.s32"
wicimage="$DEPLOY_DIR_IMAGE/$IMAGE_NAME-${MACHINE}-$DATETIME.rootfs.wic"
dd if=$atf_s32 of=$wicimage conv=notrunc bs=256 count=1 seek=0
dd if=$atf_s32 of=$wicimage conv=notrunc bs=512 seek=1 skip=1
'''

IMAGE_BOOT_FILES = "boot.scr"
